* moto
simple

* syntax
5 kyes: print, +, =, if, for

* rules
high cohesion, loose coupling
pcom as python fastest common functions and classes set file
using cfg files as much as possible
using proj.cfg to bootenv
class is Noun, function is verb_noun, variable is name_type

* pkg list
** common cli
linux, linux-headers, base, base-devel, pacman, sudo, ntp, gcc, gcc-fortran, gdb, strace, clisp, python, nodejs, npm, perl, tcl, git, subversion, rsync, transmission-cli, wget, axel, p7zip, unzip, unrar, xz, tree, calc, curl, openssh, nginx, postgresql, mariadb, dosfstools, blas, lapack, vim, cronie
** common gui
gnome, gvim, emacs, tk, openjdk, pulseaudio, gstreamer, portmidi, flac, x264, x265, ffmpeg, mpv, smplayer, ttf-dejavu
xorg-server, xorg-xinit, xorg-xrandr, xorg-xprop, xautolock, xterm, i3-wm, i3status, i3lock, dmenu, feh, pulseaudio-alsa, ponymix, ttf-font-awesome
** linux_server only
nftables, vsftpd, samba, amdgpu
** linux_client only
*** program
grub, memtest86+, gparted, nvidia, icedtea-web, chromium, pepper-flash, filezilla, tcsh, mksh, zsh, texlive-most, texlive-langchinese, imagemagick, gimp, dia, inkscape, recordmydesktop, gv, xchm, gnuplot, graphviz, cups-pdf, bchunk, aspell-en, hunspell-en, tigervnc, freerdp, celestia, gnugo, libreoffice, networkmanager, android-tools, acpid
xf86-input-libinput, mupdf, dunst, udevil, thunderbird, network-manager-applet
*** multimedia
blender, cinelerra-cv, subtitleeditor, audacity, puddletag
** chinese and ibus
adobe-source-han-sans-cn-fonts
ibus, ibus-sunpinyin
** python
beautifulsoup4, diff-match-patch, Django, djangorestframework, httpie, django-reversion, ipython, jupyter, Jinja2, matplotlib, networkx, nltk, numpy, openpyxl, cython, pandas, Pillow, pip, psycopg2, mysqlclient, pytz, pyverilog, scikit-learn, scipy, setuptools, sympy, uwsgi, xlrd, xlutils, xlwt, sphinx, jieba, SQLAlchemy, texttable, nested-dict, gitpython, line_profiler, memory_profiler, pycurl, flask, paramiko, psutil, virtualenv, tox, pylint, pylint-django, nose
** npm
vue, iview, axios, js-cookie, ckeditor
** emacs
ascii-art-to-unicode, auctex, gnugo, paredit, web-mode
** jQuery
bootstrap3, DataTables

* tools
** wiki
django wiki, trac
** bugtracker
trac
** document generator
sphinx

* emacs
** setenv
~/.emacs: (setenv "LD_LIBRARY_PATH" (concat "/usr/local/lib:/usr/lib:" (getenv "LD_LIBRARY_PATH")))
** find
find-dired: general command
find-name-dired: guide command of find-dired
find-grep: general command with grep
find-grep-dired: guide command of find-grep
** grep
grep: general command
lgrep: guide command of grep in current directory
rgrep: guide command of grep in current tree
zrgrep/rzgrep: guide command of grep in current tree including zipped files
grep-find: general command with find
** remote files (tramp)
C-x C-f <cmd> RET
/sudo::<file>
/su::<file>
/sudo:<emacs_proxy>:<file>
/su:<emacs_proxy>:<file>
/<host>:<file>
/<user>@<host>:<file>
/<user>@<host>#<port>:<file>
/<method>:<user>@<host>:<file>
/<method>:<user>@<host>#<port>:<file>
M-x shell in tramp
methods include ftp, ssh, rlogin, telnet
** batch mode
emacs --batch <file> --eval "(setq make-backup-files nil)" -f verilog-pretty-expr -f save-buffer
** rectangle
M-x rectangle-number-lines
C-u M-x rectangle-number-lines
** ansi term
prefix your standard keyboard shortcuts with C-x, M-x should be replaced with C-x M-x

* python
** pre compilation
python -m compileall <file/dir>
** install modules
python setup.py install --prefix=<local_dir>
pip install --install-option="--prefix=<local_dir>" --no-index --find-links <tar_dir> <pkg_or_tar>
** tips
os.makedirs(<dir>, exist_ok=True)
shutil.rmtree(<dir>, ignore_errors=True)
pool.starmap_async(<func>, zip(<iter>), itertools.repeat(<flg>))
any(<iter>)
<dic>.get(<key>, <default_value>)
subprocess.run(<sys_cmd>, shell=True, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, check=True).stdout.decode('utf-8').strip()
** postgresql SQL
with psycopg2.connect(None, '<database>', '<user>', '<passwd>', '<host>', '<port>') as conn:
    with conn.cursor() as c:
        c.execute(<SQL>)

conn = psycopg2.connect(None, '<database>', '<user>', '<passwd>', '<host>', '<port>')
c = conn.cursor()
c.execute(<SQL>)
conn.commit()
c.close()
conn.close()
** read and overwrite file
with open(<file>, 'r+') as f:
     f_cont = f.read()
     f.seek(0)
     f.truncate()
     f.write(<new_cont>)
** reload module
import importlib
importlib.reload(<module>)
** profiling timeit
start_time = timeit.default_timer()
<statements>
end_time = timeit.default_timer()
print(end_time-start_time)
** profiling cProfile django
import cProfile, pstats
pr = cProfile.Profile()
pr.enable()
<statements>
pr.disable()
with open('prof.log', 'w') as f:
    ps = pstats.Stats(pr, stream=f).sort_stats(1)
    ps.print_stats()
** profiling cProfile python
python -m cProfile [-o output_file] myscript.py
python shell:
    import pstats
    p = pstats.Stats('output_file')
    p.strip_dirs().sort_stats(2).print_stats()
** profiling line_profiler django
def do_line_profiler(view=None, extra_view=None):
    import line_profiler
    def wrapper(view):
        def wrapped(*args, **kwargs):
            prof = line_profiler.LineProfiler()
            prof.add_function(view)
            if extra_view:
                [prof.add_function(v) for v in extra_view]
            with prof:
                resp = view(*args, **kwargs)
            prof.print_stats()
            return resp
        return wrapped
    if view:
        return wrapper(view)
    return wrapper
@do_line_profiler
def my_view(request):
    pass
** profiling line_profiler python
myscript.py:
    @profile
    def my_func():
        pass
kernprof -l myscript.py
python -m line_profiler myscript.py.lprof
** pip config
~/.config/pip/pip.conf:
[global]
index-url = https://mirrors.ustc.edu.cn/pypi/web/simple
[list]
format = columns

* perl
perl Makefile.PL PREFIX=<local_dir>
make
make install

* makefile
CC = g++
CFLAGS = -c -Wall -g -Os -fPIC
LDFLAGS = -l${TARGET} -L./
TARGET = cmos
TARGET_LIB = libcmos.so
OBJECTS = ${patsubst %.c, %.c.o, ${wildcard *.c}}
OBJECTS += ${patsubst %.cpp, %.cpp.o, ${shell find ./ -type f -iname "*.cpp"}}
${info $$OBJECTS is [${OBJECTS}]}
all: $(TARGET)
${TARGET}: ${TARGET_LIB}
	${CC} -o $@ $^
${TARGET_LIB}: ${OBJECTS}
        ${CC} -shared -o $@ $^
%.c.o: %.c
        ${CC} ${CFLAGS} -o $@ $^
%.cpp.o: %.cpp
        ${CC} ${CFLAGS} -o $@ $^
run: ${TARGET}
	@export LD_LIBRARY_PATH=./:${LD_LIBRARY_PATH} && ./$<
clean:
        rm ${TARGET} ${TARGET_LIB} ${OBJECTS}

* sed
sed -i -E "s/<regex>/<string>/g" <files>

* git
git pull origin
git push origin master
git status
git remote show origin

sudo adduser git
sudo git init --bare /srv/ff_git.git
sudo chown -R git:git /srv/ff_git.git
which git-shell
vim /etc/passwd
git:x:1003:1003:,,,:/home/git:/usr/bin/git-shell
sudo vim ~/.ssh/authorized_keys

ssh-keygen
cat ~/.ssh/id_rsa.pub

git clone git@<server>:/srv/ff_git.git

* cleartool
cleartool ci \!:1 \!:2 `cleartool lsco -cview -me -short -r`
cleartool find . -type f -branch "brtype(<branch>)" -print
cleartool find \!:1 -version 'version(<version>) &&! lbtype(\!:2)' -print

* firefox
~/.mozilla/firefox/defaults/profile/user.js:
    user_pref("capability.policy.policynames", "localfilelinks");
    user_pref("capability.policy.localfilelinks.sites", "<site1_url> <site2_url>");
    user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");
    user_pref("browser.backspace_action", 0);
    user_pref("browser.startup.homepage", "<home_url>")

* rsync
rsync -avh --delete </src_dir/> </tar_dir/>

* pacman
pacman -Syu
pacman -Scc
pacman -Qm
pacman -Qdt

* aptitude
deborphan
aptitude purge <pkg>
aptitude autoclean
aptitude search '~i'

* yum
package-cleanup --quiet --leaves
/etc/yum.conf: clean_requirements_on_remove=1
yum remove <pkg>
yum list installed

* systemctl
systemctl list-units
systemctl enable/disable <service>
systemctl start/stop/restart <service>
systemctl --failed
systemctl reset-failed

* grub
/etc/default/grub: GRUB_GFXMODE=1920x1080
grub-mkconfig -o /boot/grub/grub.cfg

* standard help
/usr/lib /lib link problems
man <prog>
<prog> -h/--help

* local installation
.a: ./configure --prefix=<local_dir>
.so: ./configure --enable-shared --prefix=<local_dir> --with-gcc=/usr/bin/gcc44
make
make test
make install

* other lib version local installation
export LD_LIBRARY_PATH
export LD_RUN_PATH
./configure LDFLAGS="-L<path>" CPPFLAGS="-I<include_path>" --prefix=<local_path>

* smb
smb://<ip_addr>
# usermod --shell /usr/bin/nologin --lock username
# smbpasswd -a samba_user
/etc/samba/smb.conf:
    [global]
    server min protocol = SMB2

* locale
en_US.UTF-8
(rpm) /etc/sysconfig/i18n
(rpm) /etc/environment

* login shell
chsh -s <shell> <user>

* integrity check
pwck
grpck

* nvidia
** correct DPI
/etc/X11/xorg.conf.d/20-nvidia.conf:
Section "Device"
    Identifier     "Nvidia Card"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    Option         "DPI" "96 x 96"
EndSection

* amdgpu
/etc/X11/xorg.conf.d/20-amdgpu.conf:
Section "Device"
    Identifier "AMD"
    Driver "amdgpu"
EndSection

* latex cjk
** encapsulated
\usepackage[encapsulated]{CJK}
\usepackage{ucs}
\usepackage[utf8x]{inputenc}
% use one of bsmi(trad Chinese), gbsn(simp Chinese), min(Japanese), mj(Korean); see:
% /usr/share/texmf-dist/tex/latex/cjk/texinput/UTF8/*.fd
\newcommand{\cntext}[1]{\begin{CJK}{UTF8}{gbsn}#1\end{CJK}}
\cntext{你好，\LaTeX}
** directed
\documentclass[12pt, cjk]{beamer}
\usepackage[encapsulated]{CJK}
\usepackage{ucs}
\usepackage[utf8x]{inputenc}
\begin{document}
\begin{CJK}{UTF8}{gbsn}
你好，\LaTeX
\end{CJK}
\end{document}

* xetex
** xecjk
\usepackage{xeCJK}
\setCJKmainfont{SourceHanSansCN-Regular}
\begin{document}
你好，\XeTeX
\end{document}

* texlive package files update
mktexlsr

* editor coding system
** for emacs
revert-buffer-with-coding-system
** for vim
set fileencodings=utf-8,gb18030

* xfreerdp
xfreerdp -g 1920x960 --ignore-certificate -u <user> -p <passwd> --plugin rdpsnd <host>

* cinelerra
/etc/sysctl.conf: kernel.shmmax = 0x7fffffff
sysctl -p

* media format conversion
** lame
lame is used to convert mp3 vbr to cbr (Audacity for advanced conversion)
** wma2mp3
for i in *.wma;
do mplayer -vo null -vc dummy -af resample=44100 -ao pcm:waveheader "$i" && lame -m j -h --vbr-new -b 192 audiodump.wav -o "`basename "$i" .wma`.mp3";
done;
rm -f audiodump.wav
** mp32wma
pacpl -t mp3 --bitrate 320 -o wma -r <src_dir>
** 2mp4
ffmpeg -i <wmv_file> -r 60 -b:a 192k -b:v 2000k <mp4_file>
ffmpeg -i <mov_file> -r 60 -ar 44100 -b:a 192k -b:v 2000k <mp4_file>
** ape&cue2flac
ffmpeg -i <ape_file> <wav_file>
bchunk -w <wav_file> <cue_file> <new_file_prefix>
flac --best <new_file_prefix>*
** standard sample rates
192 224 256 320

* X11 resources
xrdb ~/.Xresources
xrdb -merge ~/.Xresources

* files leaving
shopt -s extglob
rm !(<file1>|<dir1>|<file2>)

* gmail
imap.googlemail.com:993
smtp.googlemail.com:465/587

* firewall
** iptables
-A INPUT -m state --state NEW -m tcp -p tcp -dport 5900:5999 -j ACCEPT
** nftables
Single machine
Flush the current ruleset:
# nft flush ruleset

Add a table:
# nft add table inet filter

Add the input, forward, and output base chains. The policy for input and forward will be to drop. The policy for output will be to accept.
# nft add chain inet filter input { type filter hook input priority 0 \; policy drop \; }
# nft add chain inet filter forward { type filter hook forward priority 0 \; policy drop \; }
# nft add chain inet filter output { type filter hook output priority 0 \; policy accept \; }

Add two regular chains that will be associated with tcp and udp:
# nft add chain inet filter TCP
# nft add chain inet filter UDP

Related and established traffic will be accepted:
# nft add rule inet filter input ct state related,established accept

All loopback interface traffic will be accepted:
# nft add rule inet filter input iif lo accept

Drop any invalid traffic:
# nft add rule inet filter input ct state invalid drop

New echo requests (pings) will be accepted:
# nft add rule inet filter input ip protocol icmp icmp type echo-request ct state new accept

New upd traffic will jump to the UDP chain:
# nft add rule inet filter input ip protocol udp ct state new jump UDP

New tcp traffic will jump to the TCP chain:
# nft add rule inet filter input ip protocol tcp tcp flags \& \(fin\|syn\|rst\|ack\) == syn ct state new jump TCP

Reject all traffic that was not processed by other rules:
# nft add rule inet filter input ip protocol udp reject
# nft add rule inet filter input ip protocol tcp reject with tcp reset
# nft add rule inet filter input counter reject with icmp type prot-unreachable

At this point you should decide what ports you want to open to incoming connections, which are handled by the TCP and UDP chains. For example to open connections for a web server add:
# nft add rule inet filter TCP tcp dport 80 accept

To accept HTTPS connections for a webserver on port 443:
# nft add rule inet filter TCP tcp dport 443 accept

To accept SSH traffic on port 22:
# nft add rule inet filter TCP tcp dport 22 accept

To accept incoming DNS requests:
# nft add rule inet filter TCP tcp dport 53 accept
# nft add rule inet filter UDP udp dport 53 accept

Be sure to make your changes permanent when satisifed.

# nft list ruleset > /etc/nftables.conf
# systemctl enable nftables.service

* postgreSQL
** cmds
pg_ctl init -D pg_data -o '-E UTF8 --lc-collate en_US.UTF-8 --lc-ctype en_US.UTF-8 -U admin -W'
pg_ctl start/stop/restart -D pg_data/
psql postgres -h <host> -p <port> -U <user>
create user <user> with password '<passwd>';
create database <db> owner <user>;
grant all privileges on database <db> to <user>;
\l
\d
\q
pg_dumpall -U admin -p <port> -f <db_dump>
psql -U admin -f <db_dump> postgres
** cfg
pg_data/pg_hba.conf:
    local all all md5
    host all all 0.0.0.0/0 md5
    host all all ::/0 md5
pg_data/postgresql.conf:
    listen_addresses = '*'
    post = 5432
    max_connections = 200

* MySQL
** index
db dir: /var/lib/mysql
cfg dir: /usr/share/mysql (mysql.server)
glb cfg dir: /etc/mysql
script: /etc/init.d/mysql
** cmds
mysql <db> -h <host> -P <port> -u <user> -p
insert into mysql.user(Host,User,Password) values("localhost","<user>",password("<passwd>"));
create database <db>;
grant all privileges on <db>.* to <user>@localhost identified by "<passwd>";
flush privileges;
insert into mysql.user(Host,User,Password) values("%","<user>",password("<passwd>"));
grant all privileges on <db>.* to <user>@"%" identified by "<passwd>";
flush privileges;
revoke all privileges on <db>.* from <user>@"%" identified by "<passwd>";
flush privileges;
show grants for <user>@localhost;
mysqladmin -u root -p password <new_passwd>

* svn
svnadmin create /svn/<proj_dir>
/svn/<proj_dir>/conf/svnserve.conf
/svn/<proj_dir>/conf/passwd
/svn/<proj_dir>/conf/authz
svnserve -d -r /svn/<proj_dir>
port:3690
svn co svn://<ip>
svn pe svn:ignore <path>
svn resolve --accept working -R <path>
svn pg -R svn:ignore <path>
svn pg -R svn:global-ignores <path>

* uwsgi
uwsgi --ini sprd_site_uwsgi.ini --pidfile=uwsgi.pid &
uwsgi --stop uwsgi.pid
uwsgi --reload uwsgi.pid

* nginx
nginx -t
/etc/nginx/nginx.conf:
    include ./conf.d/*;
nginx
nginx -s stop
nginx -s reload

* tomcat
tomcat8 home dir: /usr/share/tomcat8
/usr/share/tomcat8/conf/tomcat-users.xml:
    <role rolename="tomcat"/>
    <role rolename="manager-script"/>
    <role rolename="manager-gui"/>
    <user password="tomcat" roles="tomcat, manager-script, manager-gui,admin" username="tomcat"/>

* sshd
/etc/ssh/sshd_config
(rpm) service sshd start/stop/restart

* vncserver
(rpm) /etc/sysconfig/vncservers
vncpasswd
(rpm) service vncserver start/stop/restart
chkconfig vncserver on
(rpm) /etc/sysconfig/iptables
(rpm) service iptables restart

* django
** settings
uwsgi_params
<proj>_nginx.conf
ln -s <proj_nginx_conf_path>/<proj>_nginx.conf /etc/nginx/conf.d/
<proj>_uwsgi.ini
<proj>/settings.py
manage.py createsuperuser
manage.py makemigrations
manage.py migrate
manage.py collectstatic
manage.py dumpdata <app> > data.json
manage.py loaddata data.json
** django-bootstrap3
'javascript_in_head': True,

* irun
** pcom
-work <lib_name>
cds.lib:
    INCLUDE <cds_lib>
    DEFINE <lib_name> <lib_dir>
** analysis and elaboration options
irun -c -64bit -licqueue -status -status3 -ALLOWREDEFINITION -nowarn WARIPR -nowarn CUVWSP -nowarn CSINFI -nowarn NOCMIC -nowarn ILLORD -nowarn CUFEPC -nowarn CUDEFB -nowarn ZROMCW -nowarn MEMODR -timescale '1ns/1ps' -vlogext vh -vlogext hv -vlogext fv -nospecify -ntcnotchks -nclibdirpath <nc_lib_dir> -access +r -top <top_hier> -f <verilog_lst> -makelib <vhdl_lib> -lexpragma -ignore_extrachar -nowarn IGXCHAR -nowarn INVPRG -nowarn -V93 -f <vhdl_lst> -endlib -l <com_log>
** simulation options
irun -R -64bit -input <sim_tcl> -uselic IES:IESXL -licqueue -nclibdirpath <nc_lib_dir> -l <sim_log>
** coverage elaboration options
-covfile <cov_filter> -covoverwrite
** coverage simulation options
-covfile <cov_filter> -covtest <cov_name> -covoverwrite -covworkdir <cov_work_dir>
** imc options
imc -64bit -exec <imc_tcl>
imc -64bit -gui -init <imc_tcl>
** tcl options
logfile -overwrite <tcl_log>; run;
load -run <cov_dir>;
load -refinement <vRefine1>; load -refinement <vRefine2>;
merge_config -source <dut_hier> -target <dut_hier>
merge -overwrite -runfile <merge_lst> -out <cov_dir>;
merge -overwrite <cov_dir1> <cov_dir2> -out <merge_dir>;
report -overwrite -detail -html -out <rpt_dir> -inst <rpt_hier>... -grading covered
report -metrics toggle -uncovered -detail -text -out <rpt_txt> -inst <rpt_hier>... -grading covered
merge_lst:
    <case1_dir>/case1/cov_work/scope/*
    <case2_dir>/case2/cov_work/scope/*

* vcs
** pcom
-work <lib_name>
synopsys_sim.setup:
    WORK > DEFAULT
    DEFAULT: <lib_dir>
    <lib_name>: <lib_dir>
** analysis options
vlogan -full64 -sverilog -assert svaext -timescale=1ns/1ps -error=noMPD +warn=noUIWN +warn=noSV-LCM-PPWI +warn=noPHNE +v2k +verilog1995ext+v95 +verilog2001ext+v +verilog2001ext+vh +verilog2001ext+hv +verilog2001ext+fv +verilog2001ext+vams +nospecify +notimingcheck -f <verilog_lst> -l <vlogan_log>
vhdlan -full64 -skip_translate_body -f <vhdl_lst> -l <vhdlan_log>
vlogan -full64 -sverilog -ntb_opts uvm-1.1 +define+UVM_REG_DATA_WIDTH=32 +define+UVM_REG_ADDR_WIDTH +define+UVM_PACKER_MAX_BYTES=1500000 -l <uvm_log>
** elaboration options
vcs -full64 -sverilog -lca +vcs+lic+wait +error+999 +warn=noTFIPC +warn=noSV-SELS +warn=noSVA-LDRF +warn=noVCM-NOCOV-ENC +warn=noVCM-HFUFR +warn=noVCS-NODRCO +nospecify +lint=PCWM -top <top_hier> -debug_region=cell -debug_access+r -o <sim_obj> -l <elab_log>
** simulation options
empty_sim -assert nopostproc -l <sim_log>
** coverage elaboration options
-cm_constfile <const_lst>
-cm_hier <cov_filter>
-cm line+cond+fsm+tgl+branch
-cm_line contassign -cm_noconst -cm_seqnoconst
-cm_tgl portsonly
-cm_libs celldefine
-power=coverage+cov_pst_transition+dump_hvp
** coverage simulation options
-cm_name <cov_name>
-cm line+cond+fsm+tgl+branch
** urg options
urg -full64 -f <merge_lst> -dbname <cov_dir> -noreport
urg -full64 -dir <cov1_dir> -dir <dvo2_dir> -dbname <merge_dir> -noreport
urg -full64 -elfile <el1_file> -elfile <el2_file>
merge_lst:
    <case1_dir>/case1.vdb
    <case2_dir>/case2.vdb
** tcl options
run
** coverage gui options
verdi -cov -elfile <el1_file> -elfile <el2_file> -covdir <vdb_dir>
** caution
vhdl entity not supported in <cov_filter>

* verdi
** pcom
-lib <lib_name>
novas_rc:
    [Library]
    <lib_name> = <lib_dir>
-L <lib_name>
** analysis options
vhdlcom -93 -sup_sem_error -smartorder -f <vhdl_lst>
vericom -sv +systemverilogext+sv +v95ext+v95 +verilog2001ext+v -ignorekwd_config -f <verilog_lst>
** run options
verdi -undockWin -nologo
verdi -autoalias -sv +v2k -ssv -ssy -undockWin -nologo
** nWave options
nWave -ssf <fsdb> -sswr <novas_rc>

* crontab
crontab -l
crontab -e
# using absolute path both in crontab -e and scripts
*/3 * * * * /usr/local/bin/python3.5 /home/firefly/ff_server/svn_monitor.py
@daily rsync -a /nas/delft/cmos/ /nas/venus/cmos/nas_temp/
@daily rsync -a /nas/delft/irabbi/ /nas/venus/irabbi/nas_temp/
@weekly rsync -a --delete /nas/venus/cmos/ /nas/jupiter/cmos/
@weekly rsync -a --delete /nas/venus/irabbi/ /nas/jupiter/irabbi/

* android
** nexus
sed -i 's/ro.setupwizard.network_required=true/ro.setupwizard.network_required=false/g' /system/build.prop

* prosody
admins = { "yigy@platform.sari.com" }
VirtualHost "platform.sari.com"
Component "conference.sari.com" "muc"
    restrict_room_creation = "admin"
prosodyctl cert generate platform.sari.com

* AMD
** iommu
enable iommu in uefi
set extra linux kernel parameter "amd_iommu=on iommu=pt" to make iommu work in pass through mode

* fstab
** check disk
lsblk -f
mklabel gpt
mkfs.ext4 /dev/sdb1
** hdd
/etc/fstab
# <file system> <dir> <type> <options> <dump> <pass>
# /dev/sda2
UUID=c712efa0-104a-4e98-87a3-a04ca8160164	/         	ext4      	rw,relatime,data=ordered	0 1
# /dev/sda1
UUID=EB81-715A      	/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro	0 2
# /dev/sda3
UUID=06582195-b25d-4196-98d4-c775b3cf65bf	none      	swap      	defaults  	0 0
# /dev/sdb1
UUID=c83c5c95-caab-4669-a319-dbbc851a70e1	/nas/delft     	ext4      	rw,relatime,data=ordered	0 2
# /dev/sdc1
UUID=19a448bc-d923-459e-ac00-bab5a220c3e6	/nas/shanghai  	ext4      	rw,relatime,data=ordered	0 2
# /dev/sdd1
UUID=434311c3-7a36-4249-bb91-51cbf518793a	/nas/venus  	ext4      	rw,relatime,data=ordered,nofail,x-systemd.device-timeout=1	0 2
# /dev/sde1
UUID=8dffe51b-2326-43fd-8549-1d3a319c71e5	/nas/jupiter  	ext4      	rw,relatime,data=ordered,nofail,x-systemd.device-timeout=1	0 2
** ssd
# <file system> <dir> <type> <options> <dump> <pass>
# /dev/sda2
UUID=b78d31d2-727f-4034-8016-5c9af69d7d52	/         	ext4      	rw,relatime,discard,data=ordered	0 1
# /dev/sda1
UUID=fb432bf1-8dd9-4d6b-9a1c-4601e1996209	/boot     	ext4      	rw,relatime,discard,data=ordered	0 2
# /dev/sda3
UUID=6b835efe-6110-46c2-aea3-99d0c169e238	none      	swap      	defaults,discard  	0 0

//192.168.50.2/nas	/mnt/samba/nas		cifs	credentials=/mnt/samba/smbcredentials,x-systemd.automount	0 0

//192.168.50.2/public	/mnt/samba/public	cifs	credentials=/mnt/samba/smbcredentials,uid=cmos,gid=users,x-systemd.automount	0 0

* dhcpcd
interface enp2s0f0
static ip_address=xxx.xxx.xx.2/24
static routers=xxx.xxx.xx.1
static domain_name_servers=xxx.xxx.xx.1 114.114.114.114 8.8.8.8

* xmodmap
xmodmap -pke

* thunderbird
network.protocol-handler.warn-external.ftp = true
network.protocol-handler.warn-external.http = true
network.protocol-handler.warn-external.https = true
mail.biff.use_system_alert = true
