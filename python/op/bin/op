#! /usr/bin/env python3
"""
Author: Guanyu Yi @ OnePiece Platform Group
Email: guanyu_yi@alchip.com
Description: op platform main entrence
"""

import os
import argparse
import pcom
import init_runner
import dc_runner

LOG = pcom.gen_logger(__name__)

def gen_init_parser(subparsers):
    """to generate init parser"""
    init_parser = subparsers.add_parser(
        "init",
        help="sub cmd about generating initial project directories")
    init_parser.add_argument(
        "-list", dest="proj_list", default=False, action="store_true",
        help="toggle to list all currently available proj names")
    init_parser.add_argument(
        "-proj", dest="proj_name", default="",
        help="input the proj name which will be check out from repository")
    init_parser.add_argument(
        "-dir", dest="sub_dir", default=[], nargs="+",
        help="input the directory name from repository")
    init_parser.set_defaults(func=main_init)

def main_init(args):
    """init sub cmd top function"""
    init_runner.run_init(args)

def gen_dc_parser(subparsers):
    """to generate dc parser"""
    dc_parser = subparsers.add_parser(
        "dc",
        help="sub cmd about run dc")
    dc_parser.add_argument(
        "-gen_tcl", dest="dc_gen_tcl", default=False, action="store_true",
        help="toggle to generate dc tcl files")
    dc_parser.add_argument(
        "-d", dest="dc_dir", default="",
        help="input existed dc directory")
    dc_parser.add_argument(
        "-run", dest="dc_run", default=False, action="store_true",
        help="toggle to run dc")
    dc_parser.add_argument(
        "-topo", dest="dc_topo", default=False, action="store_true",
        help="toggle to run dc in topographical mode")
    dc_parser.add_argument(
        "-s", dest="dc_src", default="",
        help="input dc source files directory")
    dc_parser.add_argument(
        "-tm", dest="dc_tm_flg", default=False, action="store_true",
        help="toggle to parse dc timing report automatically")
    dc_parser.add_argument(
        "-l", dest="dc_tm_level", type=int, default=1,
        help="input the statistics level to parse dc timing report")
    dc_parser.add_argument(
        "-fm", dest="dc_formality", default=False, action="store_true",
        help="toggle to run formality automatically")
    dc_parser.add_argument(
        "-cp_rtl", dest="dc_cp_rtl", default=False, action="store_true",
        help="toggle to copy all rtl filelist file into timestamp dir")
    dc_parser.set_defaults(func=main_dc)

def main_dc(args):
    """dc sub cmd top function"""
    dc_runner.run_dc(args)

def gen_args_top():
    """to generate top args help for op"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-v", dest="version", default=False, action="store_true",
        help="show op version info and exit")
    subparsers = parser.add_subparsers()
    gen_init_parser(subparsers)
    gen_dc_parser(subparsers)
    return parser.parse_args()

def main():
    """op top function"""
    args = gen_args_top()
    if args.version:
        print("OnePiece Platform Version: op 4.0.0")
        return
    if hasattr(args, "func"):
        LOG.info("op commence...")
        args.func(args)
        LOG.info("op complete")
    else:
        LOG.critical("sub cmd is NA, please use -h to check all sub cmds")

if __name__ == "__main__":
    main()
