#! /usr/bin/env python3
'''
OnePiece License Issue

Created on Wed Jan 24
@author: minato
'''

import re
import json
import getpass
import argparse
import logging
from datetime import date, timedelta
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import serialization
from truepy import LicenseData, License

logging.basicConfig(level=logging.INFO, format='%(message)s')

# license pre-shared key
PSK = b'preshared_license_key'


def parse_args_top():
    ''' OP License Server argument parser '''
    parser = argparse.ArgumentParser(description="OP License Issuer")

    parser.add_argument("-k", "--server_key", type=argparse.FileType('rb'), required=True,
                        help="SSL Server key.")

    parser.add_argument("-c", "--server_certificate", type=argparse.FileType('rb'), required=True,
                        help="SSL Server Certificate.")

    parser.add_argument("-I", "--server_hostid", nargs='+', required=True,
                        help="Host ID of the license server.")

    parser.add_argument("-F", "--feature_name", nargs='+', default=["OnePiece4",],
                        help="Feature Name of the license. (default: OnePiece4)")

    parser.add_argument("-n", "--feature_count", nargs='+', type=int, default=[999,],
                        help="Number of the license. (default: 999)")

    parser.add_argument("-v", "--feature_version", default=None,
                        help="Version of the license. (default: accept all version)")

    parser.add_argument("-H", "--feature_hostid", nargs='*', default=None,
                        help="host ID. (default: no running server limitation)")

    parser.add_argument("-s", "--not_before", default=None,
                        help="Begining date of the license. (default: today)")

    parser.add_argument("-e", "--not_after", required=True,
                        help="Expiration date of the license.")

    parser.add_argument("-f", "--license_file", type=argparse.FileType('wb'), required=True,
                        help="The license file.")

    return parser.parse_args()


def dump_args(args):
    ''' dump server options '''
    logging.debug('Debug: Server arguments:')
    for attr in ('server_key', 'server_certificate', 'server_hostid',
                 'feature_name', 'feature_count', 'feature_version', 'feature_hostid',
                 'not_before', 'not_after', 'license_file'):
        logging.debug('Debug:   %s = %s', attr, getattr(args, attr))


def parse_datestr(datestr, offset=date.today()):
    ''' parse date string '''
    try:
        # example datestr: 2018/1/31
        match = re.match(r'^(\d\d\d\d)[\.,-/ ](\d\d?)[\.,-/ ](\d\d?)$', datestr)
        if match:
            year = int(match[1])
            month = int(match[2])
            day = int(match[3])
            target = date(year, month, day)
        else:
            # example datestr: 1Y, 2years, 3months, ...
            match = re.match(r'^(\d+)(y|years?|m|months?|d|days?)$', datestr.lower())
            if match:
                if match[2][0] == 'y':
                    dyear = int(match[1])
                    target = offset.replace(year=offset.year + dyear)
                    target = target - timedelta(days=1)
                elif match[2][0] == 'm':
                    dmonth = int(match[1])
                    dyear = int((offset.month + dmonth) / 12)
                    month = (offset.month + dmonth) % 12
                    if not month:
                        dyear, month = (dyear-1, 12)
                    target = offset.replace(year=offset.year + dyear, month=month)
                    target = target - timedelta(days=1)
                elif match[2][0] == 'd':
                    day = int(match[1])
                    target = offset + timedelta(days=day-1)
            else:
                logging.error('Error: Invalid date string: %s', datestr)
                raise SystemExit(-1)
    except ValueError:
        logging.error('Error: Value/range error on the date string: %s', datestr)
        raise SystemExit(-1)
    return target


def dump_license(lic):
    ''' display license including extra data '''
    data = lic.data
    logging.info('')
    logging.info('License data:')
    logging.info('  Not before : %s', data.not_before.strftime('%Y/%m/%d'))
    logging.info('  Not after  : %s', data.not_after.strftime('%Y/%m/%d'))

    extra = json.loads(data.extra)
    logging.info('  Host IDs of license server: %s', extra['serverids'])
    #
    hostids = extra.get('hostids')
    if not hostids:
        hostids = 'unlimited'
    #
    logging.info('  Servers for software running: %s', hostids)
    #
    version = extra.get('version')
    if not version:
        version = 'unlimited'
    logging.info('  Supporting software version: %s', version)
    #
    for feat, cnt in extra['features'].items():
        logging.info('  Feature: %s (%d)', feat, cnt)


if __name__ == '__main__':
    ARGS = parse_args_top()
    dump_args(ARGS)

    # Load the certificate
    CERTIFICATE = ARGS.server_certificate.read()

    # Load the private key
    try:
        PASSWORD = getpass.getpass(prompt='Input password to open the server private key: ')
        KEY = serialization.load_pem_private_key(
            ARGS.server_key.read(),
            password=PASSWORD.encode(),
            backend=backends.default_backend()
        )
    except KeyboardInterrupt:
        logging.info('Canceled.')
        raise SystemExit(0)
    except ValueError as err:
        logging.error('Error: %s', str(err))
        raise SystemExit(-1)

    # License Data
    TODAY = date.today()
    TOMORROW = TODAY + timedelta(days=1)
    if ARGS.not_before:
        NOT_BEFORE = parse_datestr(ARGS.not_before, TOMORROW)
    else:
        NOT_BEFORE = TODAY
    #
    NOT_AFTER = parse_datestr(ARGS.not_after, NOT_BEFORE)
    #
    EXTRA = dict()
    EXTRA['serverids'] = ARGS.server_hostid
    EXTRA['version'] = ARGS.feature_version
    EXTRA['hostids'] = ARGS.feature_hostid
    FEATURES = dict()
    for feature in ARGS.feature_name:
        if not ARGS.feature_count:
            count = 999
        else:
            count = ARGS.feature_count.pop()
        FEATURES[feature] = count
    EXTRA['features'] = FEATURES

    # Issue the license
    LICENSE = License.issue(
        CERTIFICATE,
        KEY,
        license_data=LicenseData(
            NOT_BEFORE.strftime('%Y-%m-%dT00:00:00'),
            NOT_AFTER.strftime('%Y-%m-%dT23:59:59'),
            extra=EXTRA
        )
    )

    # Store the license
    LICENSE.store(ARGS.license_file, PSK)

    dump_license(LICENSE)

# eof
