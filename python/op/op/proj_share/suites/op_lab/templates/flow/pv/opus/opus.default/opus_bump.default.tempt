#!/bin/csh -f
#**************** fill some information by user ********************
set bump_topcell_name      = ""  ;# user need to fill BUMP_TOPCELL                     
set bump_gds_file          = ""  ;#user need to fil BUMP_GDS
set cds_lib                = "" ;#user need to fill the cds.lib file      
#********************************************************************
%REPL_OP4
source "$RUN_DIR/scr/flow/opus.$OP4_dst_branch.$OP4_dst_eco/$BLOCK_NAME.dir.$OP4_dst_branch.csh"
#=============== opus input file ====================================
set top_name              = "$BLOCK_NAME"
set map_file              = "$OPUS_MAPPING_FILE" 
set tech_file             = "$OPUS_TECH_FILE"
set display_drf           = "$OPUS_DISPLAY_DRF" 
set run_dir               = "\$RPT_DIR/bump"                          
if ( -d \$RPT_DIR/bump ) then
rm -rf \$RPT_DIR/bump
endif
mkdir \$RPT_DIR/bump
\cp -f \${cds_lib} \${run_dir}
if (\${display_drf} != "") then
\cp -f \${display_drf} \${run_dir}
endif
#=============== strmin input file ==================================
set log_strmin_file        = "../../.\$LOG_DIR/$OP4_dst.$OP4_dst_branch.$OP4_dst_eco.bump_strmin.log"
set sum_strmin_file        = "../../.\$RPT_DIR/$BLOCK_NAME.$OP4_dst.$OP4_dst_branch.$OP4_dst_eco.bump_strmin.rep"
set scr_strmin_file        = "$FLOW_BRANCH_DIR/$BLOCK_NAME.$OP4_dst.$OP4_dst_branch.$OP4_dst_eco.bump_strmin.run"
set run_time               = "$RPT_DIR/\$OP4_src_subdir/$BLOCK_NAME.$OP4_src.$OP4_src_branch.$OP4_src_eco.run_time"
REPL_OP4%
#================== generate dummy metal stream-in script ============
cat <<strmin_setting >! ${scr_strmin_file}
#-- database setting -------------------
runDir                             "."                 # - Run Directory
topCell                            "${bump_topcell_name}"     # - Top Cell(s) to Translate
strmFile                           "${bump_gds_file}" # - Stream File Name
layerMap                           "${map_file}"       # - Layer Map File Name
loadTechFile                       "${tech_file}"      # - ASCII Technology File Name
refLibList                         "XST_CDS_LIB"        # - Rerferrence Library List File
view                               "layout"            # - View Name(s) to Translate
library                            "${bump_topcell_name}"       # - Library Name
logFile                            "${log_strmin_file}"       # - Log File Name
summaryFile                        "${sum_strmin_file}"       # - Summary File Name

#-- common setting ---------------------
pinAttNum                           0                  # - (0-127) - Stream Attribute Number To Preserve Pin
dbuPerUU                            0                  # - DB Units Per User Units
hierDepth                           32                 # - (0-32767) - Hierarchy Depth Limit
case                               "preserve"          # - preserve | upper | lower - Case Sensitivity
labelCase                          "preserve"          # - preserve | upper | lower - Label Case Sensitivity
strmTextNS                         "cdba"              # - Text NameSpace
maxCellsInTargetLib                 20000              # - Maximum Cells in Target Library
numThreads                          1                  # - Number of threads to execute simultaneously
propSeparator                      ","                 # - Property Separator Character
strmin_setting
#====================== run dummy  strmin =============================
echo "strmin_bump "  >> $run_time
echo "  start " `date "+%F %T %a"` >> $run_time
cd ${run_dir}
%REPL_OP4 
bsub -Is -P ${PROJECT_NAME} -q ${OPENLAVA_BATCH_QUEUE} -R "rusage[mem=${strmout_MEM_REQUIREMENT}]" \
"strmin -templateFile ../../.\${scr_strmin_file} "
REPL_OP4%
\rm $log_strmin_file -rf
cd ../../..
echo "  finish " `date "+%F %T %a"` >> $run_time
#************************* merge bump ************************************
%REPL_OP4 
set log_merge_file        = "../../.\$LOG_DIR/$OP4_dst.$OP4_dst_branch.$OP4_dst_eco.bump_merge.log"
set scr_merge_file        = "$FLOW_BRANCH_DIR/$BLOCK_NAME.$OP4_dst.$OP4_dst_branch.$OP4_dst_eco.bump.il"
REPL_OP4%
#================== generate dummy metal merge script ===================
cat <<gds_merge >! ${scr_merge_file}
cv = dbOpenCellViewByType("${top_name}" "${top_name}" "layout" "" "a")
unless(cv return())
dpo = dbOpenCellView("${bump_topcell_name}" "${bump_topcell_name}"  "layout")
dbCreateInst(cv dpo nil list(0.0 0.0) "R0")
dbSave(cv)
dbClose(cv)
dbClose(dpo)
exit
gds_merge
#==================== run dummy metal merge =============================
echo "create_bump "  >> $run_time
echo "  start" `date "+%F %T %a"` >> $run_time
cd ${run_dir}
%REPL_OP4 
bsub -Is -P ${PROJECT_NAME} -q ${OPENLAVA_BATCH_QUEUE} -R "rusage[mem=${strmout_MEM_REQUIREMENT}]" \
"layout -64  -nograph -log \${log_merge_file} -replay ../../.\${scr_merge_file} "
REPL_OP4%
#=================== create final cds.lib =================================
set oa_libs = ./cds.lib
set n = `wc -l < $oa_libs`
set i = 1
while ( $i <= $n )
set oa_lib = "`awk '{if (NR == $i) print }' $oa_libs`"
set lib_name = `echo $oa_lib | awk 'BEGIN{FS= " "} {print $2}'`
if ( $lib_name == $bump_topcell_name) then 
echo "$oa_lib" >> ../../$OP4_src_subdir/cds.lib
else 
endif
 @ i++
end
cd ../../..
echo "  finish" `date "+%F %T %a"` >> $run_time




