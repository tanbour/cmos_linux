#! /proj/onepiece4/Tools/python_3.6.3/bin/python3
#! /proj/onepiece4/Tools/python_2.7.13/bin/python

import configparser
import sys, os, glob, shutil, re, locale, getpass, time, pdb, stat


#------ locale setup ------
os.environ['LANG'] = 'C'
locale.setlocale(locale.LC_ALL, '')

class myconf(configparser.ConfigParser):
    def __init__(self, defaults=None):
        configparser.ConfigParser.__init__(self, defaults=defaults)
    def optionxform(self, optionstr):
        return optionstr
def usage():
    print("Example:")
    print("    ptsi script")
    print("    ptsi run")
    print("    ptsi time")

option_scr     = 0
option_run     = 0
option_time    = 0


config_file = "pt.config";
if len(sys.argv) == 1 or len(sys.argv) > 3:
    usage()
    exit()
if len(sys.argv) == 3:
    config_file = sys.argv[2]
    print("INFO: config files is "+config_file)
if len(sys.argv) == 2 or len(sys.argv) == 3:
    if sys.argv[1] == "script":
          option_scr = 1
          print("INFO: generate scripts only.")
          print("INFO: config files is "+config_file)
    elif sys.argv[1] == "run":
          option_run = 1
          print("INFO: run pt based on config file.")
          print("INFO: config files is "+config_file)
    elif sys.argv[1] == "time":
          option_time = 1
          print("INFO: check runtime only.")
    else:
          print("INFO: wrong options.")
          usage()
          exit()


cwd = os.getcwd()
config = myconf()
config.read(config_file, encoding='utf-8')

scenarios = config.get('PROJECT_INFO','ALL_SCENARIO_LIST')
scenarios = re.split(" |\n", scenarios)

if option_time:
    for scenario in scenarios:
        readyFile = cwd+"/"+scenario+"/"+scenario+".ready"
        startFile = cwd+"/"+scenario+"/"+".start"
        start_time = "pending"
        finish_time = "unknown"
        if os.path.exists(startFile):
            start_time = time.strftime('%Y-%b-%d %H:%M:%S',time.localtime(os.stat(startFile).st_ctime))
            finish_time = "running"
        if os.path.exists(readyFile):
            finish_time = time.strftime('%Y-%b-%d %H:%M:%S',time.localtime(os.stat(readyFile).st_ctime))
        else:
            flag = 0
        print("%-60s\033[1;35m%40s\033[0m\033[1;32m%40s\033[0m" %(scenario,start_time,finish_time))
    print("\n")
    exit()

if option_run or option_scr:
    for scenario in scenarios:
        element = scenario.split('.')
        isExists = os.path.exists(scenario)
        if not isExists:
            os.mkdir(scenario)
        fp = open(scenario+"/"+scenario+".pt.tcl","w")
        mode = element[0]
        volt = element[1]
        libCorner = element[2]
        rcCorner = element[3]
        checkType = element[4]
        sec = "PROJECT_INFO"
        sta_tool = config.get(sec,"STA_TOOL")
        opts = config.options(sec)
        for opt in opts:
            v = config.get(sec,opt)
            searchObj = re.search(r' |\n',v)
            if searchObj:
                fp.write("set %-40s%-50s%2s\n" %(opt,"[list ","\\"))
                vv = re.split(" |\n", v)
                for ve in vv:
                   fp.write("%-44s%-50s%2s\n" %(" ",ve," \\"))
                fp.write("%-44s%-50s\n" %(" ","]"))
            else:
                fp.write("set %-40s%-50s\n" %(opt,v))
        sec = "DESIGN_INFO"
        fp.write("set %-40s%-50s\n" %("MODE",mode))
        fp.write("set %-40s%-50s\n" %("VOLT",volt))
        fp.write("set %-40s%-50s\n" %("LIB_CORNER",libCorner))
        fp.write("set %-40s%-50s\n" %("RC_CORNER",rcCorner))
        fp.write("set %-40s%-50s\n" %("CHECK_TYPE",checkType))
        opts = config.options(sec)
        for opt in opts:
            matchObj = re.match(r'SDC_|SPEF|VNET|VOLTAGE',opt)
            if matchObj:
                pass
            else:
                v = config.get(sec,opt)
                searchObj = re.search(r' |\n',v)
                if searchObj:
                    fp.write("set %-40s%-50s%2s\n" %(opt,"[list ","\\"))
                    vv = re.split(" |\n", v)
                    for ve in vv:
                       fp.write("%-44s%-50s%2s\n" %(" ",ve," \\"))
                    fp.write("%-44s%-50s\n" %(" ","]"))
                else:
                    fp.write("set %-40s%-50s\n" %(opt,v))
    
        opt = "VOLTAGE"
        v = config.get(sec,opt)
        _VOLTAGE = []
        _VOLTAGE.append(volt)
        for i in v.split( ):
            if i not in _VOLTAGE:
                _VOLTAGE.append(i)
        v = _VOLTAGE
        if len(v)>1:
            fp.write("set %-40s%-50s%2s\n" %(opt,"[list ","\\"))
            for ve in v:
               fp.write("%-44s%-50s%2s\n" %(" ",ve," \\"))
            fp.write("%-44s%-50s\n" %(" ","]"))
        else:
            fp.write("set %-40s%-50s\n" %("VOLTAGE",v))
        opt = "VNET"
        v = config.get(sec,opt)
        fp.write("set %-40s%-50s\n" %("VNET",v))
        opt  = "SDC_LIST("+mode+","+volt+")"
        v = config.get(sec,opt)
        searchObj = re.search(r' |\n',v)
        if searchObj:
            fp.write("set %-40s%-50s%2s\n" %("SDC_LIST","[list "," \\"))
            vv = re.split(" |\n", v)
            for ve in vv:
               fp.write("%-44s%-50s%2s\n" %(" ",ve," \\"))
            fp.write("%-44s%-50s\n" %(" ","]"))
        else:
            fp.write("set %-40s%-50s\n" %("SDC_LIST",v))
        opt = "SPEF("+rcCorner+")"
        v = config.get(sec,opt)
        fp.write("set %-40s%-50s\n" %("SPEF",v))
        #searchObj = re.search(r' |\n',v)
        #if searchObj:
        #    fp.write("set %-40s%-50s\n" %("SPEF","[list \\"))
        #    vv = re.split(" |\n", v)
        #    for ve in vv: 
        #       fp.write("%-44s%-50s\n" %(" ",ve+" \\"))
        #    fp.write("%-44s%-50s\n" %(" ","]"))
        #else:
        #    fp.write("set %-40s%-50s\n" %("SPEF",v))
        sec = "FLOW_CONTROL"
        opts = config.options(sec)
        for opt in opts:
            matchObj = re.match(r'SAVE_SESSION',opt)
            if matchObj:
                v = config.get(sec,"SAVE_SESSION_SCENARIO_LIST")
                if v == "all":
                    fp.write("set %-40s%-50s\n" %("SAVE_SESSION","true"))
                else:
                    if scenario in v:
                        fp.write("set %-40s%-50s\n" %("SAVE_SESSION","true"))
                    else:
                        fp.write("set %-40s%-50s\n" %("SAVE_SESSION","false"))
            else:
                v = config.get(sec,opt)
                searchObj = re.search(r' |\n',v)
                if searchObj:
                    fp.write("set %-40s%-50s%2s\n" %(opt,"[list"," \\"))
                    vv = re.split(" |\n", v)
                    for ve in vv:
                       fp.write("%-44s%-50s%2s\n" %(" ",ve," \\"))
                    fp.write("%-44s%-50s\n" %(" ","]"))
                else:
                    fp.write("set %-40s%-50s\n" %(opt,v))
     
        fp.write("source ${PT_TEMPLATE_FILE}\n")
        fp.write("exit")
        fp.close()
        startFile = cwd+"/"+scenario+"/"+".start"
        if os.path.exists(startFile):
            os.remove(startFile)
        readyFile = cwd+"/"+scenario+"/"+scenario+".ready"
        if os.path.exists(readyFile):
            os.remove(readyFile)
        fc = open(scenario+"/run."+scenario+".csh","w")
        fc.write("#!/bin/csh -f\n\n")
        fc.write("source /apps/setenv_license.csh\n")
        fc.write("absub -r \"q:pelican M:15 n:8 os:6\" -c \""+sta_tool+" -f "+scenario+".pt.tcl | tee pt.log\"\n")
        fc.write("touch "+readyFile+"\n")
        fc.close()
        os.chmod(cwd+"/"+scenario+"/run."+scenario+".csh",stat.S_IRWXU)
        if option_scr == 0:
            os.chdir(cwd+"/"+scenario)
            os.system("xterm -e " + cwd+"/"+scenario+"/run."+scenario+".csh &")
            os.chdir(cwd)
            time.sleep(10)
    
    if option_scr == 0:
        jobFlag = 1
        timeStep = 60
        num = 0
        while (jobFlag):
            time.sleep(timeStep)
            flag = 1
            for scenario in scenarios:
                readyFile = cwd+"/"+scenario+"/"+scenario+".ready"
                startFile = cwd+"/"+scenario+"/"+".start"
                start_time = "pending"
                finish_time = str(num)+"min"
                if os.path.exists(startFile):
                    start_time = time.strftime('%Y-%b-%d %H:%M:%S',time.localtime(os.stat(startFile).st_ctime))
                    finish_time = "running"
                if os.path.exists(readyFile):
                    finish_time = time.strftime('%Y-%b-%d %H:%M:%S',time.localtime(os.stat(readyFile).st_ctime))
                else:
                    flag = 0
                print("%-60s\033[1;35m%40s\033[0m\033[1;32m%40s\033[0m" %(scenario,start_time,finish_time))
            print("\n\n")
            if flag == 0:
                jobFlag = 1
            else:
                jobFlag = 0
            num = num + 1
        os.system("touch "+cwd+"/all_pt_session.ready")
exit()
