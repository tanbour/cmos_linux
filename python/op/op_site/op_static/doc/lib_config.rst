.. _lib_config:

LIB Config User Manual
=======================
This config directory is used to set the library mapping options.

The target of lib config is to generate project unique and block unique ``liblist.tcl``. 

1. $project_root/LIB/liblist/liblist.tcl 
  
   Generated by ``op admin -lib``, this is always done by PL.

2. $block_root/run/liblist/liblist.tcl
   
   Generated by ``op flow -run``, this is always done by block owner.

OP liblist mechanism overview
--------------------------------------------

1. Linking library and tech files from ``proj_lib/`` to ``$project_root/LIB`` by search path defined in <type>.cfg (std.cfg, tech.cfg, etc.).

2. Create ``$project_root/LIB/.match_lst`` record all link file path in match_list.

3. Filtering library and tech files by ``share/config/lib.cfg`` to generate ``$project_root/LIB/liblist/liblist.tcl``.

4. Filtering Library and tech files by ``$block_root/config/lib.cfg`` to generate ``$block_root/run/liblist/liblist.tcl``.

.. figure:: images/21.PNG

lib config type
--------------------------------------------

- $PROJ_ROOT/share/config/lib::

  + project level only
  + library mapping (library linking and library filtering) configuration
  + <type>.cfg (std.cfg, tech.cfg, etc.) is used for type linking from src to dst directory
  + liblist.cfg is used to filter the linked files above to generate liblist.tcl

- $PROJ_ROOT/share/config/lib.cfg::

  + project level overwritten by block level
  + default library filtering configuration

- $BLK_ROOT/config/lib.cfg::

  + block level
  + real library filtering configuration

lib config directory
--------------------------------------------
Lib config directory exist only in ``share`` directory, config files in this directory provide linking and filtering strategy for library mapping.

 ::

   lib
   ├── io.cfg
   ├── ip.cfg
   ├── liblist.cfg
   ├── mem.cfg
   ├── std.cfg
   └── tech.cfg

config file std.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target of std.cfg is used for standard cell library linking and filtering.

std.cfg need to be updated according to different process or different vendor, since the library naming style and directory hierachical level can vary very much.

Please contact **simonz@alchip.com** for future help if you need refine <type>.cfg(std.cfg, tech.cfg ...). 

1. _pattern_search

   - Varaibles {{var}} in ``_pattern_search`` is defined with "Jinja2" style.
   - symbol asterisk(*) is a replace function of hierachical level directory or string. ("**" is the same as "*")

2. Search path rule

   Standard cell search root path path begin with ``std`` in proj.cfg's [lib] section. :ref:`ref_lib`
    
   standard cell library full searching path is compose of ``$std + _pattern_search``.
    
   _pattern_search should be formed according to original search path for difference process or std vendor.

3. Section

   - Normally, _pattern_search is defined in section ``[DEFAULT]``
   - Linked libraries to be link defiend section ``[link_std_xx]``
     + if std libraries has different lib version, PL need define multiple ``[link_std_xx]`` to support it.
    
- std.cfg example

::  

 [DEFAULT]
 _pattern_search = */{{lib_name}}/{{lib_version}}/*/{{type}}/*/*
 type = *
 #################################
 #  standard cell library        #
 #################################
 [link_std_1]
 lib_name        = tcbn16ffcllbwp16p90cpdulvt
 lib_version     = 100f
 
 [link_std_2]
 lib_name        = tcbn16ffcllbwp16p90cpd_MB_ulvt
 lib_version     = 101a

.. Tip::

 **Example: Find db with _pattern_starch**
 
 - Original path: /proj_lib/tsmc/28HPCP/SC/tsmc/7T/**tcbn28hpcplusbwp7t35p140cg**/160a/TSMCHOME/digital/Front_End/**timing_power_noise**/CCS/**tcbn28hpcplusbwp7t35p140cg_160a/tcbn28hpcplusbwp7t35p140cgffg0p88v0c_ccs.db**
 
 - _pattern_search: \*/7T/{{lib_name}}/\*/{{type}}/\*{{lib_name}}\*_ccs.db

 The highlight keywords are replaced with {{varaibles}}, and hierachical level directories are replaced with "\*".

config file tech.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target of tech.cfg is used for techfile linking and filtering.

tech.cfg need to be updated according to different process required for project, since the naming style and directory hierachical level can vary very much.

1. _pattern_search
   
   Different from std.cfg's "_pattern_seach", tech file's naming style is not unifrom for different eda tools.
   
   So, for each kind of tech file, we need define a uniq "_pattern_search" for it.

2. Search path rule

   Tech file search root path path begin with ``tech`` in proj.cfg's [lib] section. :ref:`ref_lib`

   Tech file full searching path is compose of ``$tech + _pattern_search``.

   _pattern_search should be formed according to original search path for difference process or tech vendor.

3. Section

  - _pattern_search is defined in section ``[link_xx]``
  - searching keywords are defined in ``[DEFAULT]``

4. std.cfg example

::

  [DEFAULT] 
  ## user config tech_file
  #16FFC
  metal_direction                 = VHV
  metal_stack                     = 2Xa1Xd3Xe2Y2R_UTRDL
  metal_stack_1                   = 2Xa1Xd3Xe2Y2R
  metal_stack_2                   = 2Xa1Xd_h_3Xe_vhv_2Y2R 
  metal_stack_3                   = 2xa1xd3xe2y2r*ut
  metal_stack_4                   = 2XA1XD3XE2Y2R
  metal_layer                     = 11M 
  metal_layer_1                   = 1p11m
  metal_layer_2                   = 1p11m*ut
  starrc_tech_version             = 1.0p1a
  icc2_tech_version               = 1_2a 
  innovus_tech_version            = 1_2a 
  qrc_tech_version                = 1_0p1a
  virtuoso_tech_version           = 1_4a 
  calibre_drc_ant_tech_version    = 1_2b
  calibre_lvs_tech_version        = 1_0h
  calibre_cod_tech_version        = 1_1b
  calibre_dummy_tech_version      = 1_4a
  calibre_rto_tech_version        = tn28cldr039c1_1_4b
  calibre_package_tech_version    = 1_5a
  icv_drc_ant_tech_version        = 1_2b
  icv_lvs_tech_version            = 1_0d
  icv_dummy_tech_version          = 1_4a
  icv_cod_tech_version            = 1_1b
  redhawk_tech_version            = 1.0p1a4
  laker_tech_version              = 1_3a
  
  #################################
  #          PR tech              #
  #################################
  [link_synopsys_pr_techfile]
  _pattern_search = */synopsys/*/{{icc2_tech_version}}/*/*{{metal_direction}}*/*{{metal_stack}}*
  
  [link_synopsys_pr_alf_file]
  _pattern_search = */synopsys/*/{{icc2_tech_version}}/*/*{{metal_stack_1}}.alf*
  
  [link_synopsys_pr_gdsoutmap_file]
  _pattern_search = */synopsys/*/{{icc2_tech_version}}/*/*{{metal_stack_2}}.map*
  
  [link_synopsys_pr_scm_file]
  _pattern_search = */synopsys/*/{{icc2_tech_version}}/*/*{{metal_layer}}_Antenna*.tcl*
  .....

.. Tip::
    **Example: Find ICC2 tech file with _pattern_starch**
    
    - Original path: /proj/TRAINING/OP_LAB/fruit/LIB/TECHFILE/EDA/synopsys/icc/prtechfile/tn16clpr001s1/1_2a/N16FF_PRTF_Syn_1.2a/PR_tech/Synopsys/TechFile/Standard/VHV/N16_ICC_11M_2Xa1Xd3Xe2Y2R_UTRDL_9T_PODE_1.2a.tf
    
    - _pattern_search: _pattern_search = \*/synopsys/\*/{{icc2_tech_version}}/\*/\*{{metal_direction}}*/\*{{metal_stack}}*
   
    The highlight keywords are replaced with {{varaibles}}, and hierachical level directories are replaced with "\*".

config file mem.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target of mem.cfg is used for memory library linking and filtering.

In Most case, memory libraries are located in local project directory since they are compile by design team themselve.

1. _pattern_search

   - The way of _pattern_search has no difference as std.cfg

2. Search path rule

   Memory library search root path path begin with ``mem`` in proj.cfg's [lib] section. :ref:`ref_lib`
    
   Memory library full searching path is compose of ``$std + _pattern_search``.
    
   Memory library's search path is usually point to local location instead of "proj_lib/".

3. Section

   - Normally, _pattern_search is defined in section ``[DEFAULT]``
   - Linked libraries to be link defiend section ``[link_mem_xx]``
     + if memory libraries has different lib version, PL need define multiple ``[link_mem_xx]`` to support it.

.. Tip::

   Since memory library are in local, stil need config mem.cfg for linking and filtering. 
   
   Only the files record in "match_list" can be used for in liblist.tcl 

config file ip.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target of ip.cfg is used for memory library linking and filtering.

The way to config ip.cfg is the same as mem.cfg.

.. Tip::

   If IP number is not so much, or very complicate to define ip.cfg.

   User can use manully copy ip path to section ``[custom]``, it support "*" in path.

   Example:

   DB_IP_TT0P8V_WC /proj/fruit/lib/IP/PLL/\*/\*ffg0p88v125c.db

   Then in script use "glob" for this varaible.

config file io.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
IO library is too complicate for io.cfg, it's better for user to custom it themselves.

config file liblist.cfg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target of liblist.cfg is to generate liblist.tcl, it's the tempalte of liblist.tcl.

- work mechanism
  
  + "liblist.cfg + lib.cfg" searching all files listed in "$project_root/LIB/.match_lst".
  + The files finded in ``.match_list`` will be transfered into liblist.tcl

- liblist.cfg example
  
  + varaible "lib_name", "MEM_LIST" and "IP_LIST" are comming from lib.cfg
  + User can add or delete varaible in lib.cfg to improve liblist.cfg file filtering accuracy. 

::

    [var]
    LEF_STD             = */SC/*/lef/**/{{lib_name}}*.lef
    GDS_STD             = */SC/*/gds/**/{{lib_name}}*.gds
    NDM_STD             = */SC/*/ndm/**/{{lib_name}}*.ndm
    MW_STD              = */SC/*/milkyway/**/frame_only*/
    CDL_STD             = */SC/*/spice/**/{{lib_name}}*.spi, */SC/*/spice/**/{{lib_name}}*.cdl 
    
    LEF_MEM             = */MEM/{{MEM_LIST}}*.lef
    GDS_MEM             = */MEM/{{MEM_LIST}}*.gds
    NDM_MEM             = */MEM/{{MEM_LIST}}*.ndm
    MW_MEM              = */MEM/*/milkyway/*
    CDL_MEM             = */MEM/{{lib_name}}*.spi, */MEM/{{lib_name}}*.cdl, */MEM/{{lib_name}}*.cir
    
    LEF_IP              = */IP/{{IP_LIST}}*.lef
    GDS_IP              = */IP/{{IP_LIST}}*.gds
    NDM_IP              = */IP/{{IP_LIST}}*.ndm
    MW_IP               = */IP/*/milkyway/*
    CDL_IP              = */IP/*.spi, */IP/*.cdl, */IP/*.cir
    
    LEF_IO              = */IO/*.lef
    GDS_IO              = */IO/*.gds
    NDM_IO              = */IO/*.ndm
    MW_IO               = */IO/*/milkyway/*
    CDL_IO              = */IO/*.spi, */IO/*.cdl, */IO/*.cir
    ......

.. Tip::

   The sufffix of library and tech files may vary for different vendor or process. 

   The variables in liblist.cfg can be changed or added or delete according to real project since by default it will cover most of technology possibilities.

config file lib.cfg
--------------------------------------------
The target lib.cfg is to filtering library or techfiles in ``$project_root/LIB/.match_list`` accoring to your own block.

- $PROJ_ROOT/share/config/lib.cfg
  
  PL can write all libraries or process may try or used in project. 

example project evaluation with 9T and 7d5T::
 
 # 9T
 lib_name = ts16ncga
            ts16ncgb
            ts16ncgc
            ts16ncgd
            ts16ncge
            ts16ncgf
            ts16ncgg
            ts16ncgh
            ts16ncgj
 
 # 7d5T     
 lib_name = ts16ncpa 
            ts16ncgb

- $BLK_ROOT/config/lib.cfg

  + Block owner (or PL) can reduce un-used libraries and process to save library loading time.
  + to reduce unused libraries use "#"
  + support inline commnet 

example block use only 9T::

 # 9T
 lib_name = ts16ncga
            ts16ncgb
            ts16ncgc
            ts16ncgd
            ts16ncge
            ts16ncgf
            ts16ncgg
            ts16ncgh
            ts16ncgj
 
 # # 7d5T     
 # lib_name = ts16ncpa 
 #            ts16ncgb


.. Tip::

   lib.cfg can also select CCS or NLDM
   
   lib.cfg can also select different lib corner, please remove un-used lib corner. 

For future help to configurate lib config files, please contact **simonz@alchip.com**

